package ee.ut.cs.unispect.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;





/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 17 19:55:56 EET 2025]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to UnispectSpectrum
 */
public abstract class BaseUnispectSpectrum extends BaseObject
{
    /** Serial version */
    private static final long serialVersionUID = 1737136556691L;

    /** The Peer class */
    private static final UnispectSpectrumPeer peer =
        new UnispectSpectrumPeer();


    /** The value for the spectrumId field */
    private int spectrumId;

    /** The value for the spectrumTypeId field */
    private int spectrumTypeId;

    /** The value for the comment field */
    private byte[] comment;

    /** The value for the compoundId field */
    private int compoundId;

    /** The value for the dbSpectrumId field */
    private String dbSpectrumId;

    /** The value for the dbCompoundId field */
    private String dbCompoundId;

    /** The value for the sourceId field */
    private int sourceId;


    /**
     * Get the SpectrumId
     *
     * @return int
     */
    public int getSpectrumId()
    {
        return spectrumId;
    }


    /**
     * Set the value of SpectrumId
     *
     * @param v new value
     */
    public void setSpectrumId(int v) 
    {

        if (this.spectrumId != v)
        {
            this.spectrumId = v;
            setModified(true);
        }


    }

    /**
     * Get the SpectrumTypeId
     *
     * @return int
     */
    public int getSpectrumTypeId()
    {
        return spectrumTypeId;
    }


    /**
     * Set the value of SpectrumTypeId
     *
     * @param v new value
     */
    public void setSpectrumTypeId(int v) throws TorqueException
    {

        if (this.spectrumTypeId != v)
        {
            this.spectrumTypeId = v;
            setModified(true);
        }


        if (aUnispectSpectrumType != null && !(aUnispectSpectrumType.getSpectrumTypeId() == v))
        {
            aUnispectSpectrumType = null;
        }

    }

    /**
     * Get the Comment
     *
     * @return byte[]
     */
    public byte[] getComment()
    {
        return comment;
    }


    /**
     * Set the value of Comment
     *
     * @param v new value
     */
    public void setComment(byte[] v) 
    {

        if (!ObjectUtils.equals(this.comment, v))
        {
            this.comment = v;
            setModified(true);
        }


    }

    /**
     * Get the CompoundId
     *
     * @return int
     */
    public int getCompoundId()
    {
        return compoundId;
    }


    /**
     * Set the value of CompoundId
     *
     * @param v new value
     */
    public void setCompoundId(int v) throws TorqueException
    {

        if (this.compoundId != v)
        {
            this.compoundId = v;
            setModified(true);
        }


        if (aUnispectCompound != null && !(aUnispectCompound.getCompoundId() == v))
        {
            aUnispectCompound = null;
        }

    }

    /**
     * Get the DbSpectrumId
     *
     * @return String
     */
    public String getDbSpectrumId()
    {
        return dbSpectrumId;
    }


    /**
     * Set the value of DbSpectrumId
     *
     * @param v new value
     */
    public void setDbSpectrumId(String v) 
    {

        if (!ObjectUtils.equals(this.dbSpectrumId, v))
        {
            this.dbSpectrumId = v;
            setModified(true);
        }


    }

    /**
     * Get the DbCompoundId
     *
     * @return String
     */
    public String getDbCompoundId()
    {
        return dbCompoundId;
    }


    /**
     * Set the value of DbCompoundId
     *
     * @param v new value
     */
    public void setDbCompoundId(String v) 
    {

        if (!ObjectUtils.equals(this.dbCompoundId, v))
        {
            this.dbCompoundId = v;
            setModified(true);
        }


    }

    /**
     * Get the SourceId
     *
     * @return int
     */
    public int getSourceId()
    {
        return sourceId;
    }


    /**
     * Set the value of SourceId
     *
     * @param v new value
     */
    public void setSourceId(int v) throws TorqueException
    {

        if (this.sourceId != v)
        {
            this.sourceId = v;
            setModified(true);
        }


        if (aUnispectSource != null && !(aUnispectSource.getSourceId() == v))
        {
            aUnispectSource = null;
        }

    }

    



    private UnispectSpectrumType aUnispectSpectrumType;

    /**
     * Declares an association between this object and a UnispectSpectrumType object
     *
     * @param v UnispectSpectrumType
     * @throws TorqueException
     */
    public void setUnispectSpectrumType(UnispectSpectrumType v) throws TorqueException
    {
        if (v == null)
        {
            setSpectrumTypeId( 0);
        }
        else
        {
            setSpectrumTypeId(v.getSpectrumTypeId());
        }
        aUnispectSpectrumType = v;
    }


    /**
     * Returns the associated UnispectSpectrumType object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated UnispectSpectrumType object
     * @throws TorqueException
     */
    public UnispectSpectrumType getUnispectSpectrumType()
        throws TorqueException
    {
        if (aUnispectSpectrumType == null && (this.spectrumTypeId != 0))
        {
            aUnispectSpectrumType = UnispectSpectrumTypePeer.retrieveByPK(SimpleKey.keyFor(this.spectrumTypeId));
        }
        return aUnispectSpectrumType;
    }

    /**
     * Return the associated UnispectSpectrumType object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated UnispectSpectrumType object
     * @throws TorqueException
     */
    public UnispectSpectrumType getUnispectSpectrumType(Connection connection)
        throws TorqueException
    {
        if (aUnispectSpectrumType == null && (this.spectrumTypeId != 0))
        {
            aUnispectSpectrumType = UnispectSpectrumTypePeer.retrieveByPK(SimpleKey.keyFor(this.spectrumTypeId), connection);
        }
        return aUnispectSpectrumType;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setUnispectSpectrumTypeKey(ObjectKey key) throws TorqueException
    {

        setSpectrumTypeId(((NumberKey) key).intValue());
    }




    private UnispectCompound aUnispectCompound;

    /**
     * Declares an association between this object and a UnispectCompound object
     *
     * @param v UnispectCompound
     * @throws TorqueException
     */
    public void setUnispectCompound(UnispectCompound v) throws TorqueException
    {
        if (v == null)
        {
            setCompoundId( 0);
        }
        else
        {
            setCompoundId(v.getCompoundId());
        }
        aUnispectCompound = v;
    }


    /**
     * Returns the associated UnispectCompound object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated UnispectCompound object
     * @throws TorqueException
     */
    public UnispectCompound getUnispectCompound()
        throws TorqueException
    {
        if (aUnispectCompound == null && (this.compoundId != 0))
        {
            aUnispectCompound = UnispectCompoundPeer.retrieveByPK(SimpleKey.keyFor(this.compoundId));
        }
        return aUnispectCompound;
    }

    /**
     * Return the associated UnispectCompound object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated UnispectCompound object
     * @throws TorqueException
     */
    public UnispectCompound getUnispectCompound(Connection connection)
        throws TorqueException
    {
        if (aUnispectCompound == null && (this.compoundId != 0))
        {
            aUnispectCompound = UnispectCompoundPeer.retrieveByPK(SimpleKey.keyFor(this.compoundId), connection);
        }
        return aUnispectCompound;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setUnispectCompoundKey(ObjectKey key) throws TorqueException
    {

        setCompoundId(((NumberKey) key).intValue());
    }




    private UnispectSource aUnispectSource;

    /**
     * Declares an association between this object and a UnispectSource object
     *
     * @param v UnispectSource
     * @throws TorqueException
     */
    public void setUnispectSource(UnispectSource v) throws TorqueException
    {
        if (v == null)
        {
            setSourceId( 0);
        }
        else
        {
            setSourceId(v.getSourceId());
        }
        aUnispectSource = v;
    }


    /**
     * Returns the associated UnispectSource object.
     * If it was not retrieved before, the object is retrieved from
     * the database
     *
     * @return the associated UnispectSource object
     * @throws TorqueException
     */
    public UnispectSource getUnispectSource()
        throws TorqueException
    {
        if (aUnispectSource == null && (this.sourceId != 0))
        {
            aUnispectSource = UnispectSourcePeer.retrieveByPK(SimpleKey.keyFor(this.sourceId));
        }
        return aUnispectSource;
    }

    /**
     * Return the associated UnispectSource object
     * If it was not retrieved before, the object is retrieved from
     * the database using the passed connection
     *
     * @param connection the connection used to retrieve the associated object
     *        from the database, if it was not retrieved before
     * @return the associated UnispectSource object
     * @throws TorqueException
     */
    public UnispectSource getUnispectSource(Connection connection)
        throws TorqueException
    {
        if (aUnispectSource == null && (this.sourceId != 0))
        {
            aUnispectSource = UnispectSourcePeer.retrieveByPK(SimpleKey.keyFor(this.sourceId), connection);
        }
        return aUnispectSource;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setUnispectSourceKey(ObjectKey key) throws TorqueException
    {

        setSourceId(((NumberKey) key).intValue());
    }
   
        
    private static List<String> fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List<String> getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList<String>();
            fieldNames.add("SpectrumId");
            fieldNames.add("SpectrumTypeId");
            fieldNames.add("Comment");
            fieldNames.add("CompoundId");
            fieldNames.add("DbSpectrumId");
            fieldNames.add("DbCompoundId");
            fieldNames.add("SourceId");
            fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by field (Java) name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
        if (name.equals("SpectrumId"))
        {
            return new Integer(getSpectrumId());
        }
        if (name.equals("SpectrumTypeId"))
        {
            return new Integer(getSpectrumTypeId());
        }
        if (name.equals("Comment"))
        {
            return getComment();
        }
        if (name.equals("CompoundId"))
        {
            return new Integer(getCompoundId());
        }
        if (name.equals("DbSpectrumId"))
        {
            return getDbSpectrumId();
        }
        if (name.equals("DbCompoundId"))
        {
            return getDbCompoundId();
        }
        if (name.equals("SourceId"))
        {
            return new Integer(getSourceId());
        }
        return null;
    }

    /**
     * Set a field in the object by field (Java) name.
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByName(String name, Object value )
        throws TorqueException, IllegalArgumentException
    {
        if (name.equals("SpectrumId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setSpectrumId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("SpectrumTypeId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setSpectrumTypeId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("Comment"))
        {
            // Object fields can be null
            if (value != null && ! byte[].class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setComment((byte[]) value);
            return true;
        }
        if (name.equals("CompoundId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setCompoundId(((Integer) value).intValue());
            return true;
        }
        if (name.equals("DbSpectrumId"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDbSpectrumId((String) value);
            return true;
        }
        if (name.equals("DbCompoundId"))
        {
            // Object fields can be null
            if (value != null && ! String.class.isInstance(value))
            {
                throw new IllegalArgumentException("Invalid type of object specified for value in setByName");
            }
            setDbCompoundId((String) value);
            return true;
        }
        if (name.equals("SourceId"))
        {
            if (value == null || ! (Integer.class.isInstance(value)))
            {
                throw new IllegalArgumentException("setByName: value parameter was null or not an Integer object.");
            }
            setSourceId(((Integer) value).intValue());
            return true;
        }
        return false;
    }

    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
        if (name.equals(UnispectSpectrumPeer.SPECTRUM_ID))
        {
            return new Integer(getSpectrumId());
        }
        if (name.equals(UnispectSpectrumPeer.SPECTRUM_TYPE_ID))
        {
            return new Integer(getSpectrumTypeId());
        }
        if (name.equals(UnispectSpectrumPeer.COMMENT))
        {
            return getComment();
        }
        if (name.equals(UnispectSpectrumPeer.COMPOUND_ID))
        {
            return new Integer(getCompoundId());
        }
        if (name.equals(UnispectSpectrumPeer.DB_SPECTRUM_ID))
        {
            return getDbSpectrumId();
        }
        if (name.equals(UnispectSpectrumPeer.DB_COMPOUND_ID))
        {
            return getDbCompoundId();
        }
        if (name.equals(UnispectSpectrumPeer.SOURCE_ID))
        {
            return new Integer(getSourceId());
        }
        return null;
    }

    /**
     * Set field values by Peer Field Name
     *
     * @param name field name
     * @param value field value
     * @return True if value was set, false if not (invalid name / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPeerName(String name, Object value)
        throws TorqueException, IllegalArgumentException
    {
      if (UnispectSpectrumPeer.SPECTRUM_ID.equals(name))
        {
            return setByName("SpectrumId", value);
        }
      if (UnispectSpectrumPeer.SPECTRUM_TYPE_ID.equals(name))
        {
            return setByName("SpectrumTypeId", value);
        }
      if (UnispectSpectrumPeer.COMMENT.equals(name))
        {
            return setByName("Comment", value);
        }
      if (UnispectSpectrumPeer.COMPOUND_ID.equals(name))
        {
            return setByName("CompoundId", value);
        }
      if (UnispectSpectrumPeer.DB_SPECTRUM_ID.equals(name))
        {
            return setByName("DbSpectrumId", value);
        }
      if (UnispectSpectrumPeer.DB_COMPOUND_ID.equals(name))
        {
            return setByName("DbCompoundId", value);
        }
      if (UnispectSpectrumPeer.SOURCE_ID.equals(name))
        {
            return setByName("SourceId", value);
        }
        return false;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
        if (pos == 0)
        {
            return new Integer(getSpectrumId());
        }
        if (pos == 1)
        {
            return new Integer(getSpectrumTypeId());
        }
        if (pos == 2)
        {
            return getComment();
        }
        if (pos == 3)
        {
            return new Integer(getCompoundId());
        }
        if (pos == 4)
        {
            return getDbSpectrumId();
        }
        if (pos == 5)
        {
            return getDbCompoundId();
        }
        if (pos == 6)
        {
            return new Integer(getSourceId());
        }
        return null;
    }

    /**
     * Set field values by its position (zero based) in the XML schema.
     *
     * @param position The field position
     * @param value field value
     * @return True if value was set, false if not (invalid position / protected field).
     * @throws IllegalArgumentException if object type of value does not match field object type.
     * @throws TorqueException If a problem occurs with the set[Field] method.
     */
    public boolean setByPosition(int position, Object value)
        throws TorqueException, IllegalArgumentException
    {
    if (position == 0)
        {
            return setByName("SpectrumId", value);
        }
    if (position == 1)
        {
            return setByName("SpectrumTypeId", value);
        }
    if (position == 2)
        {
            return setByName("Comment", value);
        }
    if (position == 3)
        {
            return setByName("CompoundId", value);
        }
    if (position == 4)
        {
            return setByName("DbSpectrumId", value);
        }
    if (position == 5)
        {
            return setByName("DbCompoundId", value);
        }
    if (position == 6)
        {
            return setByName("SourceId", value);
        }
        return false;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
        save(UnispectSpectrumPeer.DATABASE_NAME);
    }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
        try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
    }

    /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
        {
            alreadyInSave = true;



            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    UnispectSpectrumPeer.doInsert((UnispectSpectrum) this, con);
                    setNew(false);
                }
                else
                {
                    UnispectSpectrumPeer.doUpdate((UnispectSpectrum) this, con);
                }
            }

            alreadyInSave = false;
        }
    }


    /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key spectrumId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
        setSpectrumId(((NumberKey) key).intValue());
    }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
        setSpectrumId(Integer.parseInt(key));
    }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getSpectrumId());
    }
 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public UnispectSpectrum copy() throws TorqueException
    {
        return copy(true);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     *
     * @param con the database connection to read associated objects.
     */
    public UnispectSpectrum copy(Connection con) throws TorqueException
    {
        return copy(true, con);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     */
    public UnispectSpectrum copy(boolean deepcopy) throws TorqueException
    {
        return copyInto(new UnispectSpectrum(), deepcopy);
    }

    /**
     * Makes a copy of this object using connection.
     * It creates a new object filling in the simple attributes.
     * If the parameter deepcopy is true, it then fills all the
     * association collections and sets the related objects to
     * isNew=true.
     *
     * @param deepcopy whether to copy the associated objects.
     * @param con the database connection to read associated objects.
     */
    public UnispectSpectrum copy(boolean deepcopy, Connection con) throws TorqueException
    {
        return copyInto(new UnispectSpectrum(), deepcopy, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     */
    protected UnispectSpectrum copyInto(UnispectSpectrum copyObj) throws TorqueException
    {
        return copyInto(copyObj, true);
    }

  
    /**
     * Fills the copyObj with the contents of this object using connection.
     * The associated objects are also copied and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param con the database connection to read associated objects.
     */
    protected UnispectSpectrum copyInto(UnispectSpectrum copyObj, Connection con) throws TorqueException
    {
        return copyInto(copyObj, true, con);
    }
  
    /**
     * Fills the copyObj with the contents of this object.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     */
    protected UnispectSpectrum copyInto(UnispectSpectrum copyObj, boolean deepcopy) throws TorqueException
    {
        copyObj.setSpectrumId(spectrumId);
        copyObj.setSpectrumTypeId(spectrumTypeId);
        copyObj.setComment(comment);
        copyObj.setCompoundId(compoundId);
        copyObj.setDbSpectrumId(dbSpectrumId);
        copyObj.setDbCompoundId(dbCompoundId);
        copyObj.setSourceId(sourceId);

        copyObj.setSpectrumId( 0);

        if (deepcopy)
        {
        }
        return copyObj;
    }
        
    
    /**
     * Fills the copyObj with the contents of this object using connection.
     * If deepcopy is true, The associated objects are also copied
     * and treated as new objects.
     *
     * @param copyObj the object to fill.
     * @param deepcopy whether the associated objects should be copied.
     * @param con the database connection to read associated objects.
     */
    protected UnispectSpectrum copyInto(UnispectSpectrum copyObj, boolean deepcopy, Connection con) throws TorqueException
    {
        copyObj.setSpectrumId(spectrumId);
        copyObj.setSpectrumTypeId(spectrumTypeId);
        copyObj.setComment(comment);
        copyObj.setCompoundId(compoundId);
        copyObj.setDbSpectrumId(dbSpectrumId);
        copyObj.setDbCompoundId(dbCompoundId);
        copyObj.setSourceId(sourceId);

        copyObj.setSpectrumId( 0);

        if (deepcopy)
        {
        }
        return copyObj;
    }
    
    

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public UnispectSpectrumPeer getPeer()
    {
        return peer;
    }

    /**
     * Retrieves the TableMap object related to this Table data without
     * compiler warnings of using getPeer().getTableMap().
     *
     * @return The associated TableMap object.
     */
    public TableMap getTableMap() throws TorqueException
    {
        return UnispectSpectrumPeer.getTableMap();
    }


    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("UnispectSpectrum:\n");
        str.append("SpectrumId = ")
           .append(getSpectrumId())
           .append("\n");
        str.append("SpectrumTypeId = ")
           .append(getSpectrumTypeId())
           .append("\n");
        str.append("Comment = ")
           .append("<binary>")
           .append("\n");
        str.append("CompoundId = ")
           .append(getCompoundId())
           .append("\n");
        str.append("DbSpectrumId = ")
           .append(getDbSpectrumId())
           .append("\n");
        str.append("DbCompoundId = ")
           .append(getDbCompoundId())
           .append("\n");
        str.append("SourceId = ")
           .append(getSourceId())
           .append("\n");
        return(str.toString());
    }
}
